{
  "name": "cdk",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "packages/cdk/src",
  "projectType": "application",
  "tags": [],
  "targets": {
    "build": {
      "executor": "@nx/esbuild:esbuild",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "production",
      "options": {
        "platform": "node",
        "outputPath": "dist/packages/cdk",
        "format": ["cjs"],
        "bundle": true,
        "main": "packages/cdk/src/main.ts",
        "tsConfig": "packages/cdk/tsconfig.app.json",
        "assets": [
          "packages/cdk/src/assets",
          {
            "input": "packages/cdk",
            "glob": "cdk.json",
            "output": "."
          }
        ],
        "generatePackageJson": true,
        "skipNxCache": true,
        "esbuildOptions": {
          "sourcemap": true,
          "outExtension": {
            ".js": ".js"
          }
        }
      },
      "configurations": {
        "development": {},
        "production": {
          "esbuildOptions": {
            "sourcemap": false,
            "outExtension": {
              ".js": ".js"
            }
          }
        }
      }
    },
    "serve": {
      "executor": "@nx/js:node",
      "defaultConfiguration": "development",
      "dependsOn": ["build"],
      "options": {
        "buildTarget": "cdk:build",
        "runBuildTargetDependencies": false
      },
      "configurations": {
        "development": {
          "buildTarget": "cdk:build:development"
        },
        "production": {
          "buildTarget": "cdk:build:production"
        }
      }
    },
    "build-frontend": {
      "executor": "nx:run-commands",
      "options": {
        "command": "API_URL=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue\" --output text 2>/dev/null || echo \"http://localhost:3333/api\") && echo \"Building frontend with API URL: $API_URL\" && VITE_API_BASE_URL=$API_URL npx nx build frontend"
      }
    },
    "build-api": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npx nx build api"
      }
    },
    "build-batch": {
      "executor": "nx:run-commands",
      "options": {
        "command": "npx nx build batch"
      }
    },
    "deploy-cdk": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "dist/packages/cdk",
        "command": "cdk deploy --app ./main.js --profile lz-demos --require-approval never"
      },
      "dependsOn": [
        {
          "target": "build",
          "projects": "self"
        },
        {
          "target": "build-api",
          "projects": "self"
        },
        {
          "target": "build-batch",
          "projects": "self"
        },
        {
          "target": "build-frontend",
          "projects": "self"
        }
      ]
    },
    "deploy-batch": {
      "executor": "nx:run-commands",
      "options": {
        "command": "nx run batch:docker-build && nx run batch:docker-tag && nx run batch:docker-login && nx run batch:docker-push"
      },
      "dependsOn": [
        {
          "target": "build-batch",
          "projects": "self"
        }
      ]
    },
    "deploy-frontend": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "dist/packages/cdk",
        "command": "cdk deploy --app ./main.js --profile lz-demos --require-approval never --exclusively CodyBatchStack/Frontend"
      },
      "dependsOn": [
        {
          "target": "build",
          "projects": "self"
        },
        {
          "target": "build-frontend",
          "projects": "self"
        }
      ]
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "echo '=== STEP 1: Cleaning up previous build artifacts ==='",
          "rm -rf dist/packages/cdk/cdk.out",
          "echo '=== STEP 2: Building all packages ==='",
          "nx run-many --target=build --projects=shared,github-client,claude-client,api,batch,cdk --parallel=false",
          "echo '=== STEP 3: Building frontend with API URL from CloudFormation ==='",
          "nx run cdk:build-frontend",
          "echo '=== STEP 4: Deploying CDK stack ==='",
          "cd dist/packages/cdk && npx cdk deploy --app ./main.js --profile lz-demos --require-approval never",
          "echo '=== STEP 5: Waiting for CloudFormation to complete ==='",
          "sleep 10",
          "echo '=== STEP 6-10: Getting ECR repository URI, Building and Pushing Docker image ==='",
          "REPO_URI=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='BatchJobRepoUri'].OutputValue\" --output text) && echo \"Found ECR repository URI: $REPO_URI\" && echo 'Building Docker image...' && docker build -t cody-batch-job -f packages/batch/Dockerfile . && echo 'Logging in to ECR...' && ECR_REGISTRY=$(echo $REPO_URI | cut -d'/' -f1) && echo \"ECR Registry: $ECR_REGISTRY\" && aws ecr get-login-password --profile lz-demos | docker login --username AWS --password-stdin $ECR_REGISTRY && echo 'Tagging Docker image...' && docker tag cody-batch-job:latest $REPO_URI:latest && echo 'Pushing Docker image...' && docker push $REPO_URI:latest",
          "echo '=== STEP 11: Getting API URL ==='",
          "API_URL=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue\" --output text)",
          "echo \"API URL: $API_URL\"",
          "echo '=== STEP 12: Getting CloudFront URL ==='",
          "FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='FrontendUrl'].OutputValue\" --output text)",
          "echo \"Frontend URL: $FRONTEND_URL\"",
          "echo '=== Deployment Complete! ==='",
          "echo \"API: $API_URL\"",
          "echo \"Frontend: $FRONTEND_URL\"",
          "echo \"ECR Repository: $REPO_URI\""
        ],
        "parallel": false
      }
    },
    "test": {
      "options": {
        "passWithNoTests": true
      }
    }
  }
}

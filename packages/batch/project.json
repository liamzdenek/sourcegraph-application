{
  "name": "batch",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "packages/batch/src",
  "projectType": "application",
  "tags": [],
  "targets": {
    "build": {
      "executor": "@nx/esbuild:esbuild",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "production",
      "options": {
        "platform": "node",
        "outputPath": "dist/packages/batch",
        "format": ["cjs"],
        "bundle": true,
        "main": "packages/batch/src/main.ts",
        "tsConfig": "packages/batch/tsconfig.app.json",
        "assets": ["packages/batch/src/assets"],
        "generatePackageJson": true,
        "esbuildOptions": {
          "sourcemap": true,
          "outExtension": {
            ".js": ".js"
          }
        }
      },
      "configurations": {
        "development": {},
        "production": {
          "esbuildOptions": {
            "sourcemap": false,
            "outExtension": {
              ".js": ".js"
            }
          }
        }
      }
    },
    "build-test": {
      "executor": "@nx/esbuild:esbuild",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "development",
      "options": {
        "platform": "node",
        "outputPath": "dist/packages/batch",
        "format": ["cjs"],
        "bundle": true,
        "main": "packages/batch/src/test-batch-processor.ts",
        "tsConfig": "packages/batch/tsconfig.app.json",
        "assets": ["packages/batch/src/assets"],
        "generatePackageJson": true,
        "esbuildOptions": {
          "sourcemap": true,
          "outExtension": {
            ".js": ".js"
          }
        }
      }
    },
    "serve": {
      "executor": "@nx/js:node",
      "defaultConfiguration": "development",
      "dependsOn": ["build"],
      "options": {
        "buildTarget": "batch:build",
        "runBuildTargetDependencies": false
      },
      "configurations": {
        "development": {
          "buildTarget": "batch:build:development"
        },
        "production": {
          "buildTarget": "batch:build:production"
        }
      }
    },
    "serve-test": {
      "executor": "@nx/js:node",
      "defaultConfiguration": "development",
      "dependsOn": ["build-test"],
      "options": {
        "buildTarget": "batch:build-test",
        "runBuildTargetDependencies": false
      }
    },
    "test": {
      "options": {
        "passWithNoTests": true
      }
    },
    "docker-build": {
      "executor": "nx:run-commands",
      "options": {
        "command": "docker build -t cody-batch-job -f packages/batch/Dockerfile ."
      },
      "dependsOn": ["build"]
    },
    "docker-tag": {
      "executor": "nx:run-commands",
      "options": {
        "command": "REPO_URI=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='BatchJobRepoUri'].OutputValue\" --output text 2>/dev/null) && if [ -z \"$REPO_URI\" ]; then echo \"Error: Could not find BatchJobRepoUri in CloudFormation outputs. Make sure to deploy the CDK stack first.\"; exit 1; else echo \"Tagging image with $REPO_URI:latest\" && docker tag cody-batch-job:latest $REPO_URI:latest; fi"
      },
      "dependsOn": ["docker-build"]
    },
    "docker-login": {
      "executor": "nx:run-commands",
      "options": {
        "command": "ECR_REGISTRY=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='BatchJobRepoUri'].OutputValue\" --output text 2>/dev/null | cut -d'/' -f1) && echo \"ECR Registry: $ECR_REGISTRY\" && aws ecr get-login-password --profile lz-demos | docker login --username AWS --password-stdin $ECR_REGISTRY"
      }
    },
    "docker-push": {
      "executor": "nx:run-commands",
      "options": {
        "command": "REPO_URI=$(aws cloudformation describe-stacks --stack-name CodyBatchStack --profile lz-demos --query \"Stacks[0].Outputs[?OutputKey=='BatchJobRepoUri'].OutputValue\" --output text 2>/dev/null) && docker push $REPO_URI:latest"
      },
      "dependsOn": ["docker-tag", "docker-login"]
    }
  }
}
